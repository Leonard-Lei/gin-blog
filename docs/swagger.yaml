basePath: /v2
host: petstore.swagger.io
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /api/v1/articles:
    get:
      parameters:
      - description: TagID
        in: body
        name: tag_id
        schema:
          type: integer
      - description: State
        in: body
        name: state
        schema:
          type: integer
      - description: CreatedBy
        in: body
        name: created_by
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
        "500":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
      summary: Get multiple articles
    post:
      parameters:
      - description: TagID
        in: body
        name: tag_id
        required: true
        schema:
          type: integer
      - description: Title
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: Desc
        in: body
        name: desc
        required: true
        schema:
          type: string
      - description: Content
        in: body
        name: content
        required: true
        schema:
          type: string
      - description: CreatedBy
        in: body
        name: created_by
        required: true
        schema:
          type: string
      - description: State
        in: body
        name: state
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
        "500":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
      summary: Add article
  /api/v1/articles/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
        "500":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
      summary: Delete article
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
        "500":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
      summary: Get a single article
    put:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: TagID
        in: body
        name: tag_id
        schema:
          type: string
      - description: Title
        in: body
        name: title
        schema:
          type: string
      - description: Desc
        in: body
        name: desc
        schema:
          type: string
      - description: Content
        in: body
        name: content
        schema:
          type: string
      - description: ModifiedBy
        in: body
        name: modified_by
        required: true
        schema:
          type: string
      - description: State
        in: body
        name: state
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
        "500":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
      summary: Update article
  /api/v1/tags:
    get:
      parameters:
      - description: Name
        in: query
        name: name
        type: string
      - description: State
        in: query
        name: state
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
        "500":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
      summary: Get multiple article tags
    post:
      parameters:
      - description: Name
        in: body
        name: name
        required: true
        schema:
          type: string
      - description: State
        in: body
        name: state
        schema:
          type: integer
      - description: CreatedBy
        in: body
        name: created_by
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
        "500":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
      summary: Add article tag
  /api/v1/tags/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
        "500":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
      summary: Delete article tag
    put:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: ID
        in: body
        name: name
        required: true
        schema:
          type: string
      - description: State
        in: body
        name: state
        schema:
          type: integer
      - description: ModifiedBy
        in: body
        name: modified_by
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
        "500":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
      summary: Update article tag
  /api/v1/tags/export:
    post:
      parameters:
      - description: Name
        in: body
        name: name
        schema:
          type: string
      - description: State
        in: body
        name: state
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
        "500":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
      summary: Export article tag
  /api/v1/tags/import:
    post:
      parameters:
      - description: Excel File
        in: body
        name: file
        required: true
        schema:
          $ref: '#/definitions/file'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
        "500":
          description: '{"code":200,"data":{},"msg":"ok"}'
          schema:
            type: string
      summary: Import article tag
swagger: "2.0"
